# This code was automatically generated by CWrap version 0.0.0

cdef extern from "umfpack.h":

    int umfpack_di_symbolic(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, void **Symbolic, const double *Control, double *Info)

    long umfpack_dl_symbolic(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, void **Symbolic, const double *Control, double *Info)

    int umfpack_zi_symbolic(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, const double *Az, void **Symbolic, const double *Control, double *Info)

    long umfpack_zl_symbolic(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, const double *Az, void **Symbolic, const double *Control, double *Info)

    int umfpack_di_numeric(const int *Ap, const int *Ai, const double *Ax, void *Symbolic, void **Numeric, const double *Control, double *Info)

    long umfpack_dl_numeric(const long *Ap, const long *Ai, const double *Ax, void *Symbolic, void **Numeric, const double *Control, double *Info)

    int umfpack_zi_numeric(const int *Ap, const int *Ai, const double *Ax, const double *Az, void *Symbolic, void **Numeric, const double *Control, double *Info)

    long umfpack_zl_numeric(const long *Ap, const long *Ai, const double *Ax, const double *Az, void *Symbolic, void **Numeric, const double *Control, double *Info)

    int umfpack_di_solve(int sys, const int *Ap, const int *Ai, const double *Ax, double *X, const double *B, void *Numeric, const double *Control, double *Info)

    long umfpack_dl_solve(long sys, const long *Ap, const long *Ai, const double *Ax, double *X, const double *B, void *Numeric, const double *Control, double *Info)

    int umfpack_zi_solve(int sys, const int *Ap, const int *Ai, const double *Ax, const double *Az, double *Xx, double *Xz, const double *Bx, const double *Bz, void *Numeric, const double *Control, double *Info)

    long umfpack_zl_solve(long sys, const long *Ap, const long *Ai, const double *Ax, const double *Az, double *Xx, double *Xz, const double *Bx, const double *Bz, void *Numeric, const double *Control, double *Info)

    void umfpack_di_free_symbolic(void **Symbolic)

    void umfpack_dl_free_symbolic(void **Symbolic)

    void umfpack_zi_free_symbolic(void **Symbolic)

    void umfpack_zl_free_symbolic(void **Symbolic)

    void umfpack_di_free_numeric(void **Numeric)

    void umfpack_dl_free_numeric(void **Numeric)

    void umfpack_zi_free_numeric(void **Numeric)

    void umfpack_zl_free_numeric(void **Numeric)

    void umfpack_di_defaults(double *Control)

    void umfpack_dl_defaults(double *Control)

    void umfpack_zi_defaults(double *Control)

    void umfpack_zl_defaults(double *Control)

    int umfpack_di_qsymbolic(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, const int *Qinit, void **Symbolic, const double *Control, double *Info)

    long umfpack_dl_qsymbolic(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, const long *Qinit, void **Symbolic, const double *Control, double *Info)

    int umfpack_zi_qsymbolic(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, const double *Az, const int *Qinit, void **Symbolic, const double *Control, double *Info)

    long umfpack_zl_qsymbolic(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, const double *Az, const long *Qinit, void **Symbolic, const double *Control, double *Info)

    int umfpack_di_wsolve(int sys, const int *Ap, const int *Ai, const double *Ax, double *X, const double *B, void *Numeric, const double *Control, double *Info, int *Wi, double *W)

    long umfpack_dl_wsolve(long sys, const long *Ap, const long *Ai, const double *Ax, double *X, const double *B, void *Numeric, const double *Control, double *Info, long *Wi, double *W)

    int umfpack_zi_wsolve(int sys, const int *Ap, const int *Ai, const double *Ax, const double *Az, double *Xx, double *Xz, const double *Bx, const double *Bz, void *Numeric, const double *Control, double *Info, int *Wi, double *W)

    long umfpack_zl_wsolve(long sys, const long *Ap, const long *Ai, const double *Ax, const double *Az, double *Xx, double *Xz, const double *Bx, const double *Bz, void *Numeric, const double *Control, double *Info, long *Wi, double *W)

    int umfpack_di_triplet_to_col(int n_row, int n_col, int nz, const int *Ti, const int *Tj, const double *Tx, int *Ap, int *Ai, double *Ax, int *Map)

    long umfpack_dl_triplet_to_col(long n_row, long n_col, long nz, const long *Ti, const long *Tj, const double *Tx, long *Ap, long *Ai, double *Ax, long *Map)

    int umfpack_zi_triplet_to_col(int n_row, int n_col, int nz, const int *Ti, const int *Tj, const double *Tx, const double *Tz, int *Ap, int *Ai, double *Ax, double *Az, int *Map)

    long umfpack_zl_triplet_to_col(long n_row, long n_col, long nz, const long *Ti, const long *Tj, const double *Tx, const double *Tz, long *Ap, long *Ai, double *Ax, double *Az, long *Map)

    int umfpack_di_col_to_triplet(int n_col, const int *Ap, int *Tj)

    long umfpack_dl_col_to_triplet(long n_col, const long *Ap, long *Tj)

    int umfpack_zi_col_to_triplet(int n_col, const int *Ap, int *Tj)

    long umfpack_zl_col_to_triplet(long n_col, const long *Ap, long *Tj)

    int umfpack_di_transpose(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, const int *P, const int *Q, int *Rp, int *Ri, double *Rx)

    long umfpack_dl_transpose(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, const long *P, const long *Q, long *Rp, long *Ri, double *Rx)

    int umfpack_zi_transpose(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, const double *Az, const int *P, const int *Q, int *Rp, int *Ri, double *Rx, double *Rz, int do_conjugate)

    long umfpack_zl_transpose(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, const double *Az, const long *P, const long *Q, long *Rp, long *Ri, double *Rx, double *Rz, long do_conjugate)

    int umfpack_di_scale(double *X, const double *B, void *Numeric)

    long umfpack_dl_scale(double *X, const double *B, void *Numeric)

    int umfpack_zi_scale(double *Xx, double *Xz, const double *Bx, const double *Bz, void *Numeric)

    long umfpack_zl_scale(double *Xx, double *Xz, const double *Bx, const double *Bz, void *Numeric)

    int umfpack_di_get_lunz(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric)

    long umfpack_dl_get_lunz(long *lnz, long *unz, long *n_row, long *n_col, long *nz_udiag, void *Numeric)

    int umfpack_zi_get_lunz(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric)

    long umfpack_zl_get_lunz(long *lnz, long *unz, long *n_row, long *n_col, long *nz_udiag, void *Numeric)

    int umfpack_di_get_numeric(int *Lp, int *Lj, double *Lx, int *Up, int *Ui, double *Ux, int *P, int *Q, double *Dx, int *do_recip, double *Rs, void *Numeric)

    long umfpack_dl_get_numeric(long *Lp, long *Lj, double *Lx, long *Up, long *Ui, double *Ux, long *P, long *Q, double *Dx, long *do_recip, double *Rs, void *Numeric)

    int umfpack_zi_get_numeric(int *Lp, int *Lj, double *Lx, double *Lz, int *Up, int *Ui, double *Ux, double *Uz, int *P, int *Q, double *Dx, double *Dz, int *do_recip, double *Rs, void *Numeric)

    long umfpack_zl_get_numeric(long *Lp, long *Lj, double *Lx, double *Lz, long *Up, long *Ui, double *Ux, double *Uz, long *P, long *Q, double *Dx, double *Dz, long *do_recip, double *Rs, void *Numeric)

    int umfpack_di_get_symbolic(int *n_row, int *n_col, int *n1, int *nz, int *nfr, int *nchains, int *P, int *Q, int *Front_npivcol, int *Front_parent, int *Front_1strow, int *Front_leftmostdesc, int *Chain_start, int *Chain_maxrows, int *Chain_maxcols, void *Symbolic)

    long umfpack_dl_get_symbolic(long *n_row, long *n_col, long *n1, long *nz, long *nfr, long *nchains, long *P, long *Q, long *Front_npivcol, long *Front_parent, long *Front_1strow, long *Front_leftmostdesc, long *Chain_start, long *Chain_maxrows, long *Chain_maxcols, void *Symbolic)

    int umfpack_zi_get_symbolic(int *n_row, int *n_col, int *n1, int *nz, int *nfr, int *nchains, int *P, int *Q, int *Front_npivcol, int *Front_parent, int *Front_1strow, int *Front_leftmostdesc, int *Chain_start, int *Chain_maxrows, int *Chain_maxcols, void *Symbolic)

    long umfpack_zl_get_symbolic(long *n_row, long *n_col, long *n1, long *nz, long *nfr, long *nchains, long *P, long *Q, long *Front_npivcol, long *Front_parent, long *Front_1strow, long *Front_leftmostdesc, long *Chain_start, long *Chain_maxrows, long *Chain_maxcols, void *Symbolic)

    int umfpack_di_save_numeric(void *Numeric, char *filename)

    long umfpack_dl_save_numeric(void *Numeric, char *filename)

    int umfpack_zi_save_numeric(void *Numeric, char *filename)

    long umfpack_zl_save_numeric(void *Numeric, char *filename)

    int umfpack_di_load_numeric(void **Numeric, char *filename)

    long umfpack_dl_load_numeric(void **Numeric, char *filename)

    int umfpack_zi_load_numeric(void **Numeric, char *filename)

    long umfpack_zl_load_numeric(void **Numeric, char *filename)

    int umfpack_di_save_symbolic(void *Symbolic, char *filename)

    long umfpack_dl_save_symbolic(void *Symbolic, char *filename)

    int umfpack_zi_save_symbolic(void *Symbolic, char *filename)

    long umfpack_zl_save_symbolic(void *Symbolic, char *filename)

    int umfpack_di_load_symbolic(void **Symbolic, char *filename)

    long umfpack_dl_load_symbolic(void **Symbolic, char *filename)

    int umfpack_zi_load_symbolic(void **Symbolic, char *filename)

    long umfpack_zl_load_symbolic(void **Symbolic, char *filename)

    int umfpack_di_get_determinant(double *Mx, double *Ex, void *NumericHandle, double *User_Info)

    long umfpack_dl_get_determinant(double *Mx, double *Ex, void *NumericHandle, double *User_Info)

    int umfpack_zi_get_determinant(double *Mx, double *Mz, double *Ex, void *NumericHandle, double *User_Info)

    long umfpack_zl_get_determinant(double *Mx, double *Mz, double *Ex, void *NumericHandle, double *User_Info)

    void umfpack_di_report_status(const double *Control, int status)

    void umfpack_dl_report_status(const double *Control, long status)

    void umfpack_zi_report_status(const double *Control, int status)

    void umfpack_zl_report_status(const double *Control, long status)

    void umfpack_di_report_info(const double *Control, const double *Info)

    void umfpack_dl_report_info(const double *Control, const double *Info)

    void umfpack_zi_report_info(const double *Control, const double *Info)

    void umfpack_zl_report_info(const double *Control, const double *Info)

    void umfpack_di_report_control(const double *Control)

    void umfpack_dl_report_control(const double *Control)

    void umfpack_zi_report_control(const double *Control)

    void umfpack_zl_report_control(const double *Control)

    int umfpack_di_report_matrix(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, int col_form, const double *Control)

    long umfpack_dl_report_matrix(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, long col_form, const double *Control)

    int umfpack_zi_report_matrix(int n_row, int n_col, const int *Ap, const int *Ai, const double *Ax, const double *Az, int col_form, const double *Control)

    long umfpack_zl_report_matrix(long n_row, long n_col, const long *Ap, const long *Ai, const double *Ax, const double *Az, long col_form, const double *Control)

    int umfpack_di_report_triplet(int n_row, int n_col, int nz, const int *Ti, const int *Tj, const double *Tx, const double *Control)

    long umfpack_dl_report_triplet(long n_row, long n_col, long nz, const long *Ti, const long *Tj, const double *Tx, const double *Control)

    int umfpack_zi_report_triplet(int n_row, int n_col, int nz, const int *Ti, const int *Tj, const double *Tx, const double *Tz, const double *Control)

    long umfpack_zl_report_triplet(long n_row, long n_col, long nz, const long *Ti, const long *Tj, const double *Tx, const double *Tz, const double *Control)

    int umfpack_di_report_vector(int n, const double *X, const double *Control)

    long umfpack_dl_report_vector(long n, const double *X, const double *Control)

    int umfpack_zi_report_vector(int n, const double *Xx, const double *Xz, const double *Control)

    long umfpack_zl_report_vector(long n, const double *Xx, const double *Xz, const double *Control)

    int umfpack_di_report_symbolic(void *Symbolic, const double *Control)

    long umfpack_dl_report_symbolic(void *Symbolic, const double *Control)

    int umfpack_zi_report_symbolic(void *Symbolic, const double *Control)

    long umfpack_zl_report_symbolic(void *Symbolic, const double *Control)

    int umfpack_di_report_numeric(void *Numeric, const double *Control)

    long umfpack_dl_report_numeric(void *Numeric, const double *Control)

    int umfpack_zi_report_numeric(void *Numeric, const double *Control)

    long umfpack_zl_report_numeric(void *Numeric, const double *Control)

    int umfpack_di_report_perm(int np, const int *Perm, const double *Control)

    long umfpack_dl_report_perm(long np, const long *Perm, const double *Control)

    int umfpack_zi_report_perm(int np, const int *Perm, const double *Control)

    long umfpack_zl_report_perm(long np, const long *Perm, const double *Control)

    double umfpack_timer()

    void umfpack_tic(double *stats)

    void umfpack_toc(double *stats)

    int amd_order(int n, const int *Ap, const int *Ai, int *P, double *Control, double *Info)

    long amd_l_order(long n, const long *Ap, const long *Ai, long *P, double *Control, double *Info)

    void amd_2(int n, int *Pe, int *Iw, int *Len, int iwlen, int pfree, int *Nv, int *Next, int *Last, int *Head, int *Elen, int *Degree, int *W, double *Control, double *Info)

    void amd_l2(long n, long *Pe, long *Iw, long *Len, long iwlen, long pfree, long *Nv, long *Next, long *Last, long *Head, long *Elen, long *Degree, long *W, double *Control, double *Info)

    int amd_valid(int n_row, int n_col, const int *Ap, const int *Ai)

    long amd_l_valid(long n_row, long n_col, const long *Ap, const long *Ai)

    void **amd_malloc
    void (*amd_free)(void *)
    void *(*amd_realloc)(void *, int)
    void **amd_calloc
    int (*amd_printf)(const char *)
    void amd_defaults(double *Control)

    void amd_l_defaults(double *Control)

    void amd_control(double *Control)

    void amd_l_control(double *Control)

    void amd_info(double *Info)

    void amd_l_info(double *Info)

    double (*umfpack_hypot)(double, double)
    int (*umfpack_divcomplex)(double, double, double, double, double *, double *)
    double umf_hypot(double x, double y)

    int umf_divcomplex(double, double, double, double, double *, double *)


cdef enum umfpack_h_num_defines:
    UMFPACK_INFO = 9 # LN40, 0
    UMFPACK_CONTROL = 2 # LN41, 0
    UMFPACK_STATUS = 0 # LN181, 	/* UMFPACK_OK, or other result */
    UMFPACK_NROW = 1 # LN182, 		/* n_row input value */
    UMFPACK_NCOL = 16 # LN183, 		/* n_col input value */
    UMFPACK_NZ = 2 # LN184, 		/* # of entries in A */
    UMFPACK_SIZE_OF_UNIT = 3 # LN187, 		/* sizeof (Unit) */
    UMFPACK_SIZE_OF_INT = 4 # LN190, 		/* sizeof (int) */
    UMFPACK_SIZE_OF_LONG = 5 # LN191, 		/* sizeof (UF_long) */
    UMFPACK_SIZE_OF_POINTER = 6 # LN192, 	/* sizeof (void *) */
    UMFPACK_SIZE_OF_ENTRY = 7 # LN193, 		/* sizeof (Entry), real or complex */
    UMFPACK_NDENSE_ROW = 8 # LN194, 		/* number of dense rows */
    UMFPACK_NEMPTY_ROW = 9 # LN195, 		/* number of empty rows */
    UMFPACK_NDENSE_COL = 10 # LN196, 		/* number of dense rows */
    UMFPACK_NEMPTY_COL = 11 # LN197, 		/* number of empty rows */
    UMFPACK_SYMBOLIC_DEFRAG = 12 # LN198, 	/* # of memory compactions */
    UMFPACK_SYMBOLIC_PEAK_MEMORY = 13 # LN199, 	/* memory used by symbolic analysis */
    UMFPACK_SYMBOLIC_SIZE = 14 # LN200, 	/* size of Symbolic object, in Units */
    UMFPACK_SYMBOLIC_TIME = 15 # LN201, 	/* time (sec.) for symbolic analysis */
    UMFPACK_SYMBOLIC_WALLTIME = 17 # LN202, 	/* wall clock time for sym. analysis */
    UMFPACK_STRATEGY_USED = 18 # LN203, 	/* strategy used: sym, unsym, 2by2 */
    UMFPACK_ORDERING_USED = 19 # LN204, 	/* ordering used: colamd, amd, given */
    UMFPACK_QFIXED = 31 # LN205, 		/* whether Q is fixed or refined */
    UMFPACK_DIAG_PREFERRED = 32 # LN206, 	/* whether diagonal pivoting attempted*/
    UMFPACK_PATTERN_SYMMETRY = 33 # LN207, 	/* symmetry of pattern of S */
    UMFPACK_NZ_A_PLUS_AT = 34 # LN208, 		/* nnz (S+S'), excl. diagonal */
    UMFPACK_NZDIAG = 35 # LN209, 		/* nnz (diag (S)) */
    UMFPACK_SYMMETRIC_LUNZ = 36 # LN212, 	/* nz in L+U, if AMD ordering used */
    UMFPACK_SYMMETRIC_FLOPS = 37 # LN213, 	/* flops for LU, if AMD ordering used */
    UMFPACK_SYMMETRIC_NDENSE = 38 # LN214, 	/* # of "dense" rows/cols in S+S' */
    UMFPACK_SYMMETRIC_DMAX = 39 # LN215, 	/* max nz in cols of L, for AMD */
    UMFPACK_2BY2_NWEAK = 51 # LN218, 		    /* number of weak diagonal entries*/
    UMFPACK_2BY2_UNMATCHED = 52 # LN219, 	    /* # of weak diagonals not matched*/
    UMFPACK_2BY2_PATTERN_SYMMETRY = 53 # LN220,     /* symmetry of pattern of P*S */
    UMFPACK_2BY2_NZ_PA_PLUS_PAT = 54 # LN221, 	    /* nz in PS+(PS)' */
    UMFPACK_2BY2_NZDIAG = 55 # LN222, 		    /* nz on diagonal of PS+(PS)' */
    UMFPACK_COL_SINGLETONS = 56 # LN225, 	/* # of column singletons */
    UMFPACK_ROW_SINGLETONS = 57 # LN226, 	/* # of row singletons */
    UMFPACK_N2 = 58 # LN227, 			/* size of S */
    UMFPACK_S_SYMMETRIC = 59 # LN228, 		/* 1 if S square and symmetricly perm.*/
    UMFPACK_NUMERIC_SIZE_ESTIMATE = 20 # LN231,     /* final size of Numeric->Memory */
    UMFPACK_PEAK_MEMORY_ESTIMATE = 21 # LN232, 	    /* for symbolic & numeric */
    UMFPACK_FLOPS_ESTIMATE = 22 # LN233, 	    /* flop count */
    UMFPACK_LNZ_ESTIMATE = 23 # LN234, 		    /* nz in L, incl. diagonal */
    UMFPACK_UNZ_ESTIMATE = 24 # LN235, 		    /* nz in U, incl. diagonal */
    UMFPACK_VARIABLE_INIT_ESTIMATE = 25 # LN236,    /* initial size of Numeric->Memory*/
    UMFPACK_VARIABLE_PEAK_ESTIMATE = 26 # LN237,    /* peak size of Numeric->Memory */
    UMFPACK_VARIABLE_FINAL_ESTIMATE = 27 # LN238,   /* final size of Numeric->Memory */
    UMFPACK_MAX_FRONT_SIZE_ESTIMATE = 28 # LN239,   /* max frontal matrix size */
    UMFPACK_MAX_FRONT_NROWS_ESTIMATE = 29 # LN240,  /* max # rows in any front */
    UMFPACK_MAX_FRONT_NCOLS_ESTIMATE = 30 # LN241,  /* max # columns in any front */
    UMFPACK_NUMERIC_SIZE = 40 # LN244, 		    /* final size of Numeric->Memory */
    UMFPACK_PEAK_MEMORY = 41 # LN245, 		    /* for symbolic & numeric */
    UMFPACK_FLOPS = 42 # LN246, 		    /* flop count */
    UMFPACK_LNZ = 43 # LN247, 			    /* nz in L, incl. diagonal */
    UMFPACK_UNZ = 44 # LN248, 			    /* nz in U, incl. diagonal */
    UMFPACK_VARIABLE_INIT = 45 # LN249, 	    /* initial size of Numeric->Memory*/
    UMFPACK_VARIABLE_PEAK = 46 # LN250, 	    /* peak size of Numeric->Memory */
    UMFPACK_VARIABLE_FINAL = 47 # LN251, 	    /* final size of Numeric->Memory */
    UMFPACK_MAX_FRONT_SIZE = 48 # LN252, 	    /* max frontal matrix size */
    UMFPACK_MAX_FRONT_NROWS = 49 # LN253, 	    /* max # rows in any front */
    UMFPACK_MAX_FRONT_NCOLS = 50 # LN254, 	    /* max # columns in any front */
    UMFPACK_NUMERIC_DEFRAG = 60 # LN257, 	    /* # of garbage collections */
    UMFPACK_NUMERIC_REALLOC = 61 # LN258, 	    /* # of memory reallocations */
    UMFPACK_NUMERIC_COSTLY_REALLOC = 62 # LN259,    /* # of costlly memory realloc's */
    UMFPACK_COMPRESSED_PATTERN = 63 # LN260, 	    /* # of integers in LU pattern */
    UMFPACK_LU_ENTRIES = 64 # LN261, 		    /* # of reals in LU factors */
    UMFPACK_NUMERIC_TIME = 65 # LN262, 		    /* numeric factorization time */
    UMFPACK_UDIAG_NZ = 66 # LN263, 		    /* nz on diagonal of U */
    UMFPACK_RCOND = 67 # LN264, 		    /* est. reciprocal condition # */
    UMFPACK_WAS_SCALED = 68 # LN265, 		    /* none, max row, or sum row */
    UMFPACK_RSMIN = 69 # LN266, 		    /* min (max row) or min (sum row) */
    UMFPACK_RSMAX = 70 # LN267, 		    /* max (max row) or max (sum row) */
    UMFPACK_UMIN = 71 # LN268, 			    /* min abs diagonal entry of U */
    UMFPACK_UMAX = 72 # LN269, 			    /* max abs diagonal entry of U */
    UMFPACK_ALLOC_INIT_USED = 73 # LN270, 	    /* alloc_init parameter used */
    UMFPACK_FORCED_UPDATES = 74 # LN271, 	    /* # of forced updates */
    UMFPACK_NUMERIC_WALLTIME = 75 # LN272, 	    /* numeric wall clock time */
    UMFPACK_NOFF_DIAG = 76 # LN273, 		    /* number of off-diagonal pivots */
    UMFPACK_ALL_LNZ = 77 # LN275, 		    /* nz in L, if no dropped entries */
    UMFPACK_ALL_UNZ = 78 # LN276, 		    /* nz in U, if no dropped entries */
    UMFPACK_NZDROPPED = 79 # LN277, 		    /* # of dropped small entries */
    UMFPACK_IR_TAKEN = 80 # LN280, 	    /* # of iterative refinement steps taken */
    UMFPACK_IR_ATTEMPTED = 81 # LN281, 	    /* # of iter. refinement steps attempted */
    UMFPACK_OMEGA1 = 82 # LN282, 	    /* omega1, sparse backward error estimate */
    UMFPACK_OMEGA2 = 83 # LN283, 	    /* omega2, sparse backward error estimate */
    UMFPACK_SOLVE_FLOPS = 84 # LN284, 	    /* flop count for solve */
    UMFPACK_SOLVE_TIME = 85 # LN285, 	    /* solve time (seconds) */
    UMFPACK_SOLVE_WALLTIME = 86 # LN286,    /* solve time (wall clock, seconds) */
    UMFPACK_ORDERING_COLAMD = 0 # LN295, 	/* COLAMD(A) */
    UMFPACK_ORDERING_AMD = 1 # LN296, 		/* AMD(A+A') */
    UMFPACK_ORDERING_GIVEN = 2 # LN297, 	/* Q is provided on input */
    UMFPACK_PRL = 0 # LN304, 			/* print level */
    UMFPACK_DENSE_ROW = 1 # LN307, 		/* dense row parameter */
    UMFPACK_DENSE_COL = 2 # LN308, 		/* dense col parameter */
    UMFPACK_BLOCK_SIZE = 4 # LN309, 		/* BLAS-3 block size */
    UMFPACK_STRATEGY = 5 # LN310, 		/* auto, symmetric, unsym., or 2by2 */
    UMFPACK_2BY2_TOLERANCE = 12 # LN311, 	/* 2-by-2 pivot tolerance */
    UMFPACK_FIXQ = 13 # LN312, 			/* -1: no fixQ, 0: default, 1: fixQ */
    UMFPACK_AMD_DENSE = 14 # LN313, 		/* for AMD ordering */
    UMFPACK_AGGRESSIVE = 19 # LN314, 		/* whether or not to use aggressive
    UMFPACK_PIVOT_TOLERANCE = 3 # LN318, 	/* threshold partial pivoting setting */
    UMFPACK_ALLOC_INIT = 6 # LN319, 		/* initial allocation ratio */
    UMFPACK_SYM_PIVOT_TOLERANCE = 15 # LN320, 	/* threshold, only for diag. entries */
    UMFPACK_SCALE = 16 # LN321, 		/* what row scaling to do */
    UMFPACK_FRONT_ALLOC_INIT = 17 # LN322, 	/* frontal matrix allocation ratio */
    UMFPACK_DROPTOL = 18 # LN323, 		/* drop tolerance for entries in L,U */
    UMFPACK_IRSTEP = 7 # LN326, 		/* max # of iterative refinements */
    UMFPACK_COMPILED_WITH_BLAS = 8 # LN329, 	    /* uses the BLAS */
    UMFPACK_COMPILED_FOR_MATLAB = 9 # LN330, 	    /* 1 if MATLAB mexFunction, etc. */
    UMFPACK_COMPILED_WITH_GETRUSAGE = 10 # LN331,   /* uses getrusage timer, or not */
    UMFPACK_COMPILED_IN_DEBUG_MODE = 11 # LN332,    /* debugging enabled (very slow!) */
    UMFPACK_STRATEGY_AUTO = 0 # LN337, 		/* use sym. or unsym. strategy */
    UMFPACK_STRATEGY_UNSYMMETRIC = 1 # LN338, 	/* COLAMD(A), coletree postorder,
    UMFPACK_STRATEGY_2BY2 = 2 # LN340, 		/* AMD(PA+PA'), no coletree postorder,
    UMFPACK_STRATEGY_SYMMETRIC = 3 # LN343, 	/* AMD(A+A'), no coletree postorder,
    UMFPACK_SCALE_NONE = 0 # LN347, 	/* no scaling */
    UMFPACK_SCALE_SUM = 1 # LN348, 	/* default: divide each row by sum (abs (row))*/
    UMFPACK_SCALE_MAX = 2 # LN349, 	/* divide each row by max (abs (row)) */
    UMFPACK_DEFAULT_DENSE_ROW = 0 # LN356, .2
    UMFPACK_DEFAULT_DENSE_COL = 0 # LN357, .2
    UMFPACK_DEFAULT_PIVOT_TOLERANCE = 0 # LN358, .1
    UMFPACK_DEFAULT_2BY2_TOLERANCE = 0 # LN359, .01
    UMFPACK_DEFAULT_SYM_PIVOT_TOLERANCE = 0 # LN360, .001
    UMFPACK_DEFAULT_BLOCK_SIZE = 3 # LN361, 2
    UMFPACK_DEFAULT_ALLOC_INIT = 0 # LN362, .7
    UMFPACK_DEFAULT_FRONT_ALLOC_INIT = 0 # LN363, .5
    UMFPACK_OK = 0 # LN378, )
    UMFPACK_WARNING_singular_matrix = 1 # LN382, )
    UMFPACK_WARNING_determinant_underflow = 2 # LN385, )
    UMFPACK_WARNING_determinant_overflow = 3 # LN386, )
    UMFPACK_ERROR_out_of_memory = -1 # LN390, )
    UMFPACK_ERROR_invalid_Numeric_object = -3 # LN391, )
    UMFPACK_ERROR_invalid_Symbolic_object = -4 # LN392, )
    UMFPACK_ERROR_argument_missing = -5 # LN393, )
    UMFPACK_ERROR_n_nonpositive = -6 # LN394, )
    UMFPACK_ERROR_invalid_matrix = -8 # LN395, )
    UMFPACK_ERROR_different_pattern = -11 # LN396, )
    UMFPACK_ERROR_invalid_system = -13 # LN397, )
    UMFPACK_ERROR_invalid_permutation = -15 # LN398, )
    UMFPACK_ERROR_internal_error = -911 # LN399,  /* yes, call me if you get this! */
    UMFPACK_ERROR_file_IO = -17 # LN400, )
    UMFPACK_A = 0 # LN411, 	/* Ax=b    */
    UMFPACK_At = 1 # LN412, 	/* A'x=b   */
    UMFPACK_Aat = 2 # LN413, 	/* A.'x=b  */
    UMFPACK_Pt_L = 3 # LN415, 	/* P'Lx=b  */
    UMFPACK_L = 4 # LN416, 	/* Lx=b    */
    UMFPACK_Lt_P = 5 # LN417, 	/* L'Px=b  */
    UMFPACK_Lat_P = 6 # LN418, 	/* L.'Px=b */
    UMFPACK_Lt = 7 # LN419, 	/* L'x=b   */
    UMFPACK_Lat = 8 # LN420, 	/* L.'x=b  */
    UMFPACK_U_Qt = 9 # LN422, 	/* UQ'x=b  */
    UMFPACK_U = 10 # LN423, 	/* Ux=b    */
    UMFPACK_Q_Ut = 11 # LN424, 	/* QU'x=b  */
    UMFPACK_Q_Uat = 12 # LN425, 	/* QU.'x=b */
    UMFPACK_Ut = 13 # LN426, 	/* U'x=b   */
    UMFPACK_Uat = 14 # LN427, 	/* U.'x=b  */